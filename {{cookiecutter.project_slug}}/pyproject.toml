[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"


####################
# Project Metadata #
####################

[project]
name = "{{ cookiecutter.project_slug }}"
description = "{{ cookiecutter.project_short_description }}"
readme = "README.md"
requires-python = ">={{ cookiecutter.target_python_version }}"
{%- if cookiecutter.open_source_license == 'proprietary' %}
license = { file = "LICENSE.txt" }
{%- else -%}
# only license identifier from https://spdx.org/licenses/ are allowed
license = { text = "{{ cookiecutter.open_source_license }}"}
{%- endif %}
# keywords for easier look-up on PyPI
keywords = ["keyword_1", "keyword_2"] # ToDo: Modify according to your needs!
authors = [
    { name = "{{ cookiecutter.full_name }}", email = "{{ cookiecutter.email }}" },
]
# options under https://pypi.org/classifiers/
classifiers = [ # ToDo: Modify according to your needs!
    "Development Status :: 2 - Pre-Alpha",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
]
# direct dependencies of this package, installed when users `pip install {{ cookiecutter.project_slug }}` later.
dependencies = [ # ToDo: Modify according to your needs!
    "setuptools_scm",
    # "typer",
    # "numpy",
    # "matplotlib",
    # "seaborn",
]
dynamic = ["version"]

[project.optional-dependencies]
# n. a.

[project.scripts]
# Use `fibonacci` as command-line script, comment or remove this section if not needed.
fibonacci = "{{ cookiecutter.pkg_name }}.skeleton:app"

[project.urls]
# important URLs for this project
# ToDo: Modify according to your needs!
Documentation = "{{ cookiecutter.project_repo }}"
Source = "{{ cookiecutter.project_repo }}"
Tracker = "{{ cookiecutter.project_repo }}/issues"
Sponsor = "https://github.com/sponsors/{{ cookiecutter.github_username }}"


######################
# Build & Versioning #
######################

[tool.hatch.metadata]
# direct dependency references, e.g `pip @ git+https://github.com/pypa/pip.git@master`
allow-direct-references = true

[tool.hatch.version]
source = "vcs"
raw-options = { version_scheme = "no-guess-dev" }

[tool.hatch.build.hooks.vcs]
version-file = "src/{{ cookiecutter.pkg_name }}/_version.py"

[tool.hatch.build]
packages = ["src/{{ cookiecutter.pkg_name }}"]

[tool.hatch.build.targets.sdist]
artifacts = ["_version.py"]
exclude = [
    "/.github",
]

[tool.bumpversion]
current_version = "0.1.5"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
ignore_missing_files = true
ignore_missing_version = true
commit = true
commit_args = ""
sign_tags = false
tag = true
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
message = "Bump version: {current_version} → {new_version}"
setup_hooks= ["generate-changelog"]
post_commit_hooks = ["hatch build"]

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "Unreleased"

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "{current_version}...HEAD"
replace = "{current_version}...{new_version}"

[tool.semantic_release]
assets = []
build_command = "pip install hatch && hatch build"
build_command_env = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = true
allow_zero_version = true
no_git_verify = false
tag_format = "v{version}"
version_variable = []
version_toml = ["pyproject.toml:tool.bumpversion:current_version"]
version_pattern = []

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease = false
prerelease_token = "rc"

[tool.semantic_release.changelog]
exclude_commit_patterns = []
mode = "init"
insertion_flag = "<!-- version list -->"

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"
mask_initial_release = true

[tool.semantic_release.changelog.environment]
block_start_string = "{% raw %}{%{% endraw %}"
block_end_string = "{% raw %}%}{% endraw %}"
variable_start_string = "{% raw %}{{{% endraw %}"
variable_end_string = "{% raw %}}}{% endraw %}"
comment_start_string = "{% raw %}{#{% endraw %}"
comment_end_string = "{% raw %}#}{% endraw %}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
other_allowed_tags = ["build", "chore", "ci", "docs", "style", "refactor", "test"]
allowed_tags = ["feat", "fix", "perf", "build", "chore", "ci", "docs", "style", "refactor", "test"]
default_bump_level = 0

[tool.semantic_release.remote]
name = "origin"
type = "github"
token = { env = "GH_TOKEN" }
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true


##################
# External Tools #
##################

[tool.mypy]
files = ["src/{{ cookiecutter.pkg_name }}", "tests"]
disallow_untyped_defs = false
follow_imports = "normal" # "silent" for not following
ignore_missing_imports = true
pretty = true
show_column_numbers = true
warn_no_return = false
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --doctest-glob='*.md'"
testpaths = [
    "tests",
]

[tool.coverage.run]
branch = true
source = ["src/{{ cookiecutter.pkg_name }}"]
omit = [
    "_version.py",  # automatically created by hatch-vcs, not in repo
]

[tool.coverage.paths]
source = [
    "src/",
    "*/site-packages/",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
# ruff will use `requires-python` as `target-version` by default
line-length = 120
indent-width = 4
include = [
    "src/**/*.py",
    "src/**/*.pyi",
    "tests/**/*.py",
    "tests/**/*.pyi"
]

[tool.ruff.lint]
preview = true # preview features & checks, use with caution
extend-select = [ # features in preview
    "W292", # missing-newline-at-end-of-file
]
select = [
    "A",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT", # Boolean trap
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "SIM",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
    "RUF100", # Automatically remove unused # noqa directives
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    "PLC1901", # empty string comparisons
    "PLW2901", # `for` loop variable overwritten
    "SIM114", # Combine `if` branches using logical `or` operator
    "E203", # Whitespace before :, needed for black compatability and also `ruff format`
    "ISC001", # causes unexpected behaviour with formatter
    "I001", # enforce reorganisation of imports
    "T201",  # print statements
    "Q000"   # double quotes found but single quotes preferred
]
unfixable = [
    # "F401",  # Don't touch unused imports
]
exclude = ["__init__.py", "_version.py"]

[tool.ruff.format]
quote-style = "single" # be more like black
exclude = ["__init__.py", "_version.py"]

[tool.ruff.lint.isort]
known-first-party = ["{{ cookiecutter.pkg_name }}"]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Allow print/pprint
"examples/*" = ["T201"]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]


#####################
# Environment Setup #
#####################
{%- if cookiecutter.lock_file_support %}

[tool.hatch.env]
requires = ["hatch-pip-compile~=1.11.2"]
{%- endif %}

# Hatch default environment with production dependencies
[tool.hatch.envs.default]
python = "{{ cookiecutter.target_python_version }}"
post-install-commands = ["pre-commit install,"pre-commit install --hook-type commit-msg""]
{%- if cookiecutter.lock_file_support %}
type = "pip-compile"
pip-compile-constraint = "default"  # keep locks between default & others consistent
lock-filename = "locks/{env_name}.lock"
pip-compile-hashes = false  # no hashes in lock files
{%- endif %}
dependencies = [
    "pre-commit",
    "gitlint"
]
{%- if cookiecutter.lock_file_support %}
[tool.hatch.envs.default.scripts]
upgrade-all = "PIP_COMPILE_UPGRADE=1 hatch env run --env {env_name} -- python --version"
upgrade-pkg = "PIP_COMPILE_UPGRADE_PACKAGE='{args}' hatch env run --env {env_name} -- python --version"
{%- endif %}
# installer = pip

# Hatch default test environment for "hatch test" (also used in GitAction)
[tool.hatch.envs.hatch-test]
dependencies = [
    "pip",
    "coverage-enable-subprocess==1.0",
    "coverage[toml]~=7.4",
    "pytest~=8.1",
    "pytest-mock~=3.12",
    "pytest-randomly~=3.15",
    "pytest-rerunfailures~=14.0",
    "pytest-xdist[psutil]~=3.5",
]

# Test environment with test-only dependencies (do not mix up with default hatch-test environment "hatch-test" !)
[tool.hatch.envs.test]
dependencies = [
    # required test dependencies
    "pip",
    "coverage[toml]>=7.4",
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-vcr",
    "pytest-sugar",
    # additional test & development dependencies
    # ToDo: Modify according to your needs!
    "hypothesis",
    "jupyterlab",
    "ipython",
    "seaborn",
    "pandas",
]
[tool.hatch.envs.test.scripts]
cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/{{ cookiecutter.pkg_name }} --cov=tests {args}"
no-cov = "cov --no-cov {args}"
debug =  "cov --no-cov -s --pdb --pdbcls=IPython.core.debugger:Pdb {args}"

# Hatch testing environment matrix for various Python versions replacing the functionality of tox
[[tool.hatch.envs.test.matrix]]
template = ["test"]
python = ["39", "310", "311", "312", "313"]

# Hatch default linting environment for "hatch fmt"
[tool.hatch.envs.hatch-static-analysis]
dependencies = [
    "pip",
    "mypy==1.13.0",
    "ruff==0.8.3"
]

# Hatch Linting environment for GitAction
[tool.hatch.envs.lint]
template = "lint"  # don't inherit from default!
dependencies = [
    "pip",
    "mypy==1.13.0",
    "ruff==0.8.3"
]
[tool.hatch.envs.lint.scripts]
typing = [
    "echo \"VERSION: `mypy --version`\"",
    "mypy --install-types --non-interactive {args}"
]
style = [
    "echo \"VERSION: `ruff --version`\"",
    "ruff check {args:.}",
    "ruff format --check {args:.}",
]
fix = [
    "ruff format {args:.}",
    "ruff check --fix {args:.}",
    "style",  # feedback on what is not fixable
]
all = [
    "style",
    "typing",
]

# Hatch environment for building documentation
[tool.hatch.envs.docs]
dependencies = [
    "mkdocs~=1.6",
    "mkdocs-material[imaging]~=9.4",
    # Plugins
    "mkdocs-include-markdown-plugin",
    "mkdocs-gen-files",
    "mkdocs-literate-nav",
    "mkdocs-minify-plugin~=0.8",
    "mkdocs-section-index",
    "mkdocs-git-revision-date-localized-plugin~=1.2",
    "mkdocstrings[python]",
    "mkdocs-redirects~=1.2",
    "mkdocs-glightbox~=0.4.0",
    "mike~=2.1",
    # Extensions Hatch
    "pymdown-extensions~=10.9",
    # Necessary for syntax highlighting in code blocks
    "pygments~=2.18",
    # Validation
    "linkchecker~=10.4",
]
[tool.hatch.envs.docs.env-vars]
SOURCE_DATE_EPOCH = "1580601600"
PYTHONUNBUFFERED = "1"
MKDOCS_CONFIG = "mkdocs.yml"
[tool.hatch.envs.docs.scripts]
build = "mkdocs build --config-file {env:MKDOCS_CONFIG} --clean --strict {args}"
serve = "mkdocs serve --config-file {env:MKDOCS_CONFIG} --dev-addr localhost:8000 {args}"
ci-build = "mike deploy --config-file {env:MKDOCS_CONFIG} --update-aliases {args}"
# --ignore-url=None since the SUMMARY.md file leaves a <toc>None</toc> in sitemap.xml
validate = "linkchecker --config .linkcheckerrc --ignore-url=/reference --ignore-url=None site"
# https://github.com/linkchecker/linkchecker/issues/678
build-check = [
    "build",
    "validate",
]
